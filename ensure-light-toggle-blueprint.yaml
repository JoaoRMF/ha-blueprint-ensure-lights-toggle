blueprint:
  name: "Retry Light/ Switch State"
  description: >
    Turn on/off a light or switch and retry if the state does not match. 
    Calls a fallback service on failure.
  domain: automation
  input:
    target_entity:
      name: Target Entity
      description: The light or switch to control
      selector:
        entity:
          domain:
            - light
            - switch
    desired_state:
      name: Desired State
      description: The desired final state
      selector:
        select:
          options:
            - on
            - off
    check_period:
      name: Check Period
      description: Time in seconds to wait before checking the state again
      default: 5
      selector:
        number:
          min: 1
          max: 60
          step: 1
          mode: box
          unit_of_measurement: s
    number_retries:
      name: Number of Retries
      description: How many times to attempt setting the state
      default: 3
      selector:
        number:
          min: 1
          max: 10
          step: 1
          mode: box
    on_failure_service:
      name: Failure Service
      description: Service to call if all retries fail
      default: notify.mobile_app_my_phone
      selector:
        text:
    on_failure_service_data:
      name: Failure Service Data
      description: Data passed to the Failure Service
      default:
        message: "Unable to change to the requested state after multiple retries."
      selector:
        object:

mode: queued

trigger:
  # Example trigger â€” adjust as needed or remove to call manually
  - platform: state
    entity_id: !input target_entity

action:
  - repeat:
      count: !input number_retries
      sequence:
        - choose:
            - conditions: "{{ !input.desired_state == 'on' }}"
              sequence:
                - service: light.turn_on
                  data:
                    entity_id: !input target_entity
            - conditions: "{{ !input.desired_state == 'off' }}"
              sequence:
                - service: light.turn_off
                  data:
                    entity_id: !input.target_entity
        - delay: !input.check_period
        - choose:
            - conditions:
                - condition: state
                  entity_id: !input.target_entity
                  state: !input.desired_state
              sequence:
                - break
  - condition: template
    value_template: >
      {{ states(!input.target_entity) == !input.desired_state }}
  - choose:
      - conditions: >
          {{ not ( states(!input.target_entity) == !input.desired_state ) }}
        sequence:
          - service: !input.on_failure_service
            data: !input.on_failure_service_data
