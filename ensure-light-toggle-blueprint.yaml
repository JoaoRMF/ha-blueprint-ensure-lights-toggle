blueprint:
  name: "Retry Light/Switch Script"
  description: >
    Turns a light or switch on or off, checks for the correct state, retries if needed,
    and calls a fallback service upon failure if it never reaches the desired state.
  domain: script

  input:
    target_entity:
      name: Target Entity
      description: The light or switch to control
      selector:
        entity:
          domain:
            - light
            - switch

    desired_state:
      name: Desired State
      description: The final state (on/off) to reach
      selector:
        select:
          options:
            - on
            - off

    check_period:
      name: Check Period (seconds)
      description: How many seconds to wait before checking the state again
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: s
          mode: box

    number_retries:
      name: Number of Retries
      description: How many times to attempt setting the desired state
      default: 3
      selector:
        number:
          min: 1
          max: 10
          mode: box

    on_failure_service:
      name: Failure Service
      description: Which service to call upon failure
      default: notify.notify
      selector:
        text:

    on_failure_service_data:
      name: Failure Service Data
      description: Data passed into the fallback service
      default:
        message: "Unable to reach desired state."
      selector:
        object:

sequence:
  - repeat:
      count: !input number_retries
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ !input.desired_state == 'on' }}"
              sequence:
                - service: light.turn_on
                  target:
                    entity_id: !input target_entity
            - conditions:
                - condition: template
                  value_template: "{{ !input.desired_state == 'off' }}"
              sequence:
                - service: light.turn_off
                  target:
                    entity_id: !input target_entity

        - delay:
            seconds: !input check_period

        - choose:
            - conditions:
                - condition: state
                  entity_id: !input target_entity
                  state: !input desired_state
              sequence:
                - break

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(!input.target_entity) != !input.desired_state }}"
        sequence:
          - service: !input on_failure_service
            data: !input on_failure_service_data
