blueprint:
  name: Service Retry with State Validation
  description: Retry service calls until entity reaches desired state
  domain: automation
  input:
    target_entity:
      name: Target Entity
      description: Entity to control and monitor
      selector:
        entity: {}
    service_to_call:
      name: Service
      description: Service to execute on the entity
      selector:
        service:
          integration: 
            - "{{ (target_entity.split('.')[0]) | default('homeassistant') }}"
    expected_state:
      name: Expected State
      description: State to validate after service call
      selector:
        state:
          entity_id: !input target_entity
    check_period:
      name: Retry Delay
      description: Time between attempts
      selector:
        duration:
    number_retries:
      name: Retry Attempts
      description: Number of retries after initial attempt
      selector:
        number:
          min: 0
          max: 10
          mode: box
    action_on_failure:
      name: Failure Action
      description: Action to execute after all retries fail
      selector:
        action:

variables:
  remaining_retries: !input number_retries

trigger:
  - platform: event
    event_type: retry_service_validation

action:
  - choose:
      - conditions: "{{ trigger is not defined or trigger.event.data.target_entity != target_entity }}"
        sequence:
          # Initial service call
          - service: !input service_to_call
            target:
              entity_id: !input target_entity
          - delay: !input check_period
          - condition: template
            value_template: "{{ is_state(input.target_entity, input.expected_state) }}"
          - if:
              - "{{ not condition }}"
            then:
              - event: retry_service_validation
                event_data:
                  target_entity: !input target_entity
                  retries: "{{ remaining_retries }}"

    default:
      # Retry sequence
      - variables:
          remaining_retries: "{{ trigger.event.data.retries | int - 1 }}"
      - if:
          - "{{ remaining_retries >= 0 }}"
        then:
          - service: !input service_to_call
            target:
              entity_id: !input target_entity
          - delay: !input check_period
          - condition: template
            value_template: "{{ is_state(input.target_entity, input.expected_state) }}"
          - if:
              - "{{ not condition }}"
            then:
              - event: retry_service_validation
                event_data:
                  target_entity: !input target_entity
                  retries: "{{ remaining_retries }}"
        else:
          # Failure action
          - action: !input action_on_failure

mode: restart
